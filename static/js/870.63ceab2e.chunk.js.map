{"version":3,"file":"static/js/870.63ceab2e.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","webpack://samurai-way/./src/components/Profile/Posts/Posts.module.css?138f","webpack://samurai-way/./src/components/Profile/Posts/Post/Post.module.css?59e2","components/Profile/Posts/Post/Post.tsx","components/Profile/Posts/MyPost.tsx","components/Profile/Posts/MyPostContainer.tsx","components/Profile/Posts/Posts.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Profile/ProfileAPI.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profileImg\":\"Profile_profileImg__ZRmmw\"};","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Posts_profile__bCePr\",\"messages\":\"Posts_messages__w5oYu\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__qeYgu\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    messageText: string\r\n    likesNumber: number\r\n}\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n    return (\r\n\r\n        <div className={s.item}>\r\n            <img src=\"https://thumbs.dreamstime.com/b/happy-smiling-geek-hipster-beard-man-cool-avatar-geek-man-avatar-104871313.jpg\"/>\r\n            <div>{props.messageText}</div>\r\n            <span> {props.likesNumber} </span>\r\n            <button>like</button>\r\n        </div>\r\n\r\n\r\n    );\r\n}","import React, {FC} from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormControls/FormControls\";\r\n\r\ntype MyPostPropsType = {\r\n    addPost: (text: string) => void\r\n}\r\n\r\n\r\nexport const MyPost = React.memo((props: MyPostPropsType) => {\r\n    const addPost = (values: AddNewPostDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>My posts</h3>\r\n            <AddNewPostReduxForm onSubmit={addPost}/>\r\n        </div>\r\n    )\r\n});\r\n\r\ntype AddNewPostDataType = {\r\n    newPostText: string\r\n}\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: FC<InjectedFormProps<AddNewPostDataType>> = (props) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea} name={'newPostText'} placeholder={\"New Post\"}\r\n                   validate={[requiredField, maxLength10]}/>\r\n        </div>\r\n        <div>\r\n            <button>Отправить</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddNewPostDataType>({\r\n    // a unique name for the form\r\n    form: 'addNewPost'\r\n})(AddNewPostForm)","import React from \"react\";\r\nimport {addPost} from \"../../../redux/profile-reducer\";\r\nimport {ActionsTypes, DispatchType, StateType} from \"../../../redux/redux-store\";\r\nimport {MyPost} from \"./MyPost\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    NewPostText: string\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): mapStateToPropsType => {\r\n    return {\r\n        NewPostText: 'state.profilePage.NewPostText'\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: DispatchType): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPost(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost)","import React from 'react';\r\nimport s from './Posts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostContainer} from \"./MyPostContainer\";\r\nimport {useSelector, useStore} from \"react-redux\";\r\nimport {PostType} from \"../../../redux/profile-reducer\";\r\nimport {StateType} from \"../../../redux/redux-store\";\r\n\r\nexport const Posts = () => {\r\n    const posts = useSelector<StateType,PostType[]>(state => state.profilePage.posts)\r\n    const PostsElements = posts.map((post, index) => <Post key={index}\r\n                                                                             messageText={post.messageText}\r\n                                                                             likesNumber={post.likesNumber}/>)\r\n    return (\r\n        <div className={s.profile}>\r\n            <MyPostContainer/>\r\n\r\n            <div className={s.messages}>\r\n                {PostsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"profileInfoImg\":\"ProfileInfo_profileInfoImg__DPa3C\",\"userInfo\":\"ProfileInfo_userInfo__mHTe6\",\"avatar\":\"ProfileInfo_avatar__wlKPZ\"};","import {ChangeEvent, FC, useEffect, useState} from \"react\";\r\n\r\ntype PropsType = {\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n}\r\n\r\nexport const ProfileStatus: FC<PropsType> = ({updateStatus, status}) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(status)\r\n\r\n    useEffect(() => {\r\n        setTitle(status)\r\n    }, [status])\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        updateStatus(title)\r\n    }\r\n\r\n    return editMode ?\r\n        <input autoFocus={true} onBlur={offEditMode} placeholder={status} onChange={onChangeStatus} value={title}/>\r\n        : <span onDoubleClick={onEditMode}>Status: {status} </span>\r\n\r\n}","import React, {FC} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n}\r\n\r\nexport const ProfileInfo: FC<ProfileInfoPropsType> = ({profile,updateStatus,status}) => {\r\n    return (\r\n        <>\r\n            {/* <div>\r\n                <img className={s.profileInfoImg}\r\n                    src=\"https://helpx.adobe.com/content/dam/help/en/photoshop/using/convert-color-image-black-white/jcr_content/main-pars/before_and_after/image-before/Landscape-Color.jpg\"/>\r\n            </div>*/}\r\n            <div className={s.userInfo}>\r\n                <div>\r\n                    <img className={s.avatar} src={profile.photos.large} alt=\"user-avatar\"/>\r\n                </div>\r\n                <ProfileStatus updateStatus={updateStatus} status={status}/>\r\n\r\n                <div>Full Name: {profile.fullName}</div>\r\n                {profile.lookingForAJob && <div>Looking for a job: {profile.lookingForAJobDescription}</div>}\r\n                avatar+description\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, {FC} from 'react';\r\nimport s from './Profile.module.css'\r\nimport {Posts} from \"./Posts/Posts\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport const Profile: FC<ProfilePropsType> = ({profile, updateStatus, status}) => {\r\n\r\n    return (\r\n        <div className={s.profileImg}>\r\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus}/>\r\n            <Posts/>\r\n        </div>\r\n\r\n    );\r\n}","import {connect} from \"react-redux\";\r\nimport {ProfileAPI} from \"./ProfileAPI\";\r\nimport {StateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getProfileThunk,\r\n    getStatusThunk,\r\n    ProfileType,\r\n    setUserProfile,\r\n    updateStatusThunk\r\n} from \"../../redux/profile-reducer\";\r\n\r\n\r\nexport type mapStateToPropsType = {\r\n    profile: ProfileType\r\n    isAuth: boolean\r\n    profileStatus: string\r\n    authorisedUserID: number\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    profileStatus: state.profilePage.status,\r\n    isAuth: state.auth.isAuth,\r\n    authorisedUserID: state.auth.id\r\n})\r\n\r\n// @ts-ignore\r\nexport const ProfileContainer = connect(mapStateToProps, {\r\n    setUserProfile,\r\n    getProfileThunk,\r\n    getStatusThunk,\r\n    updateStatusThunk\r\n})(ProfileAPI)","import React, {FC, useEffect} from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {useNavigate, useParams,} from \"react-router-dom\";\r\n\r\nexport type ProfileAPIPropsType = {\r\n    profile: ProfileType\r\n    setUserProfile: (userProfile: ProfileType) => void\r\n    getProfileThunk: (userId: number) => void\r\n    getStatusThunk: (userId: number) => void\r\n    updateStatusThunk: (status: string) => void\r\n    isAuth: boolean\r\n    profileStatus: string\r\n    authorisedUserID: number\r\n}\r\n\r\nexport const ProfileAPI: FC<ProfileAPIPropsType> = (props) => {\r\n    let {userId} = useParams()\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n\r\n        if (!userId) {\r\n            userId = props.authorisedUserID.toString()\r\n            if (userId === '0') {\r\n                navigate('/login')\r\n            }\r\n        }\r\n        props.getProfileThunk(+userId)\r\n        props.getStatusThunk(+userId)\r\n    }, [userId])\r\n\r\n    return <Profile {...props} profile={props.profile} status={props.profileStatus}\r\n                    updateStatus={props.updateStatusThunk}/>\r\n}\r\n\r\n\r\n/*\r\nexport const WithUrlDataProfileContainer = withRouter(ProfileAPI)*/\r\n"],"names":["Post","props","className","s","src","messageText","likesNumber","MyPost","React","AddNewPostReduxForm","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","requiredField","MyPostContainer","connect","state","NewPostText","dispatch","Posts","PostsElements","useSelector","profilePage","posts","map","post","index","ProfileStatus","updateStatus","status","useState","editMode","setEditMode","title","setTitle","useEffect","autoFocus","onBlur","onChange","e","currentTarget","value","onDoubleClick","ProfileInfo","profile","photos","large","alt","fullName","lookingForAJob","lookingForAJobDescription","Profile","ProfileContainer","profileStatus","isAuth","auth","authorisedUserID","id","setUserProfile","getProfileThunk","getStatusThunk","updateStatusThunk","userId","useParams","navigate","useNavigate","toString"],"sourceRoot":""}