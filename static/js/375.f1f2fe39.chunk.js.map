{"version":3,"file":"static/js/375.f1f2fe39.chunk.js","mappings":"kLACA,G,QAAiC,iCAAjC,EAA2E,yBAA3E,EAA6G,wBAA7G,EAA8I,wBAA9I,EAAiL,0BAAjL,EAAqN,yB,mBCQxMA,EAAS,SAACC,GACnB,OACI,gBAAKC,UAAWC,EAAW,IAAMA,EAAjC,UACI,SAAC,KAAD,CAASC,GAAI,YAAcH,EAAMI,GAAIH,UAAW,qBAAEI,SACnCH,OAAWI,GAD1B,SAEGN,EAAMO,WCPRC,EAAU,SAACR,GAEpB,OACQ,gBAAKC,UAAWC,EAAhB,SAA4BF,EAAMS,W,gDCwCxCC,GAAcC,EAAAA,EAAAA,GAAiB,IAexBC,GAAsBC,EAAAA,EAAAA,GAAsB,CAACC,KAAM,wBAA7BD,EAd8B,SAAC,GAAgB,IAAZb,EAAW,oBAG7E,OAAO,kBAAMe,SAAUf,EAAMgB,aAAtB,WACH,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUC,KAAM,iBAAkBC,YAAa,qBAC1DC,SAAU,CAACC,EAAAA,EAAeb,QAErC,0BACI,+F,0CCjDNc,EAAO,SAACC,GACV,MAAO,CACHC,OAAQD,EAAME,KAAKD,SCM3B,IDDoCE,ECgBvBC,GDhBuBD,GCgBaE,EAAAA,EAAAA,KAfzB,SAACL,GACrB,MAAO,CACHM,YAAaN,EAAMM,YACnBL,OAAQD,EAAME,KAAKD,WAIA,SAACM,GACxB,MAAO,CACHC,WAAY,SAACC,GACTF,GAASG,EAAAA,EAAAA,GAAwBD,QAKIJ,EFd1B,SAAC9B,GAEpB,IAAMoC,EAAkBpC,EAAM+B,YAAYM,QAAQC,KAAI,SAAAC,GAAE,OAAI,SAACxC,EAAD,CAAoBQ,MAAOgC,EAAGnB,KAAMhB,GAAImC,EAAGnC,IAA9BmC,EAAGnC,OAGtEoC,EAAmBxC,EAAM+B,YAAYU,SAASH,KAAI,SAAAC,GAAE,OAAI,SAAC/B,EAAD,CAAqBC,QAAS8B,EAAG9B,SAAnB8B,EAAGnC,OAM/E,OAAKJ,EAAM0B,QAGP,iBAAKzB,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKkC,KAEL,iBAAKnC,UAAWC,EAAhB,UACKsC,GACD,SAAC5B,EAAD,CAAqBG,SAbX,SAAC2B,GACnB1C,EAAMiC,WAAWS,EAAOR,0BAGF,SAAC,KAAD,CAAU/B,GAAI,eCJP2B,EAAAA,EAAAA,IAAQN,EAARM,EAPP,SAAC9B,GACvB,IAAK0B,EAAwB1B,EAAxB0B,OAAWiB,GAAhB,OAA6B3C,EAA7B,GACA,OAAK0B,GAEE,SAACE,GAAD,UAAee,KAFF,SAAC,KAAD,CAAUxC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsWrapper\":\"Dialogs_dialogsWrapper__CUVin\",\"dialogs\":\"Dialogs_dialogs__nUxYG\",\"dialog\":\"Dialogs_dialog__JsVyw\",\"active\":\"Dialogs_active__afXKw\",\"messages\":\"Dialogs_messages__OZYam\",\"message\":\"Dialogs_message__L8wZ7\"};","import s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype DialogPropsType = {\r\n    title: string\r\n    id: number\r\n}\r\n\r\nexport const Dialog = (props: DialogPropsType) => {\r\n    return (\r\n        <div className={s.dialog + \" \" + s.active}>\r\n            <NavLink to={\"/dialogs/\" + props.id} className={({isActive}) =>\r\n                isActive ? s.active : undefined\r\n            }>{props.title}</NavLink>\r\n        </div>\r\n    )\r\n}","import s from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n\r\n    return (\r\n            <div className={s.message}>{props.message}</div>\r\n    )\r\n}","import React, {ChangeEvent, FC} from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport {Dialog} from \"./Dialog/Dialog\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {dialogsPageType} from \"../../redux/dialogs-reducer\";\r\nimport {Navigate} from 'react-router-dom'\r\nimport {ProfileAPI} from \"../Profile/ProfileAPI\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormControls/FormControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\n\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: dialogsPageType\r\n    addMessage: (newMessageBody: string) => void\r\n    UpdateMessageBody: (text: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    const DialogsElements = props.dialogsPage.dialogs.map(el => <Dialog key={el.id} title={el.name} id={el.id}/>)\r\n\r\n\r\n    const MessagesElements = props.dialogsPage.messages.map(el => <Message key={el.id} message={el.message}/>)\r\n\r\n    const addNewMessage = (values: ValuesType) => {\r\n        props.addMessage(values.newMessageBody)\r\n    }\r\n\r\n    if (!props.isAuth) return <Navigate to={'/login'}/>\r\n\r\n    return (\r\n        <div className={s.dialogsWrapper}>\r\n            <div className={s.dialogs}>\r\n                {DialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {MessagesElements}\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\ntype ValuesType = {\r\n    newMessageBody: string\r\n}\r\nconst maxLength50 = maxLengthCreator(50)\r\nexport const AddMessageForm: FC<InjectedFormProps<ValuesType>> = ({...props}) => {\r\n\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea} name={'newMessageBody'} placeholder={'Enter your message'}\r\n                   validate={[requiredField, maxLength50]}/>\r\n        </div>\r\n        <div>\r\n            <button>Отправить</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<ValuesType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import {Navigate} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {Dialogs} from \"../components/Dialogs/Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../redux/redux-store\";\r\n\r\n\r\ntype MSTPType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst MSTP = (state: StateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MSTPType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to={'/login'}/>\r\n\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    const ConnectRedirectComponent = connect(MSTP)(RedirectComponent)\r\n\r\n    return ConnectRedirectComponent\r\n}","import React from \"react\";\r\nimport {\r\n    AddMessageActionCreator, dialogsPageType\r\n} from \"../../redux/dialogs-reducer\";\r\nimport {DispatchType, StateType} from \"../../redux/redux-store\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage: dialogsPageType\r\n    isAuth: boolean\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addMessage: (newMessageBody: string) => void\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): mapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: DispatchType): mapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (newMessageBody) => {\r\n            dispatch(AddMessageActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = WithAuthRedirect(connect(mapStateToProps, mapDispatchToProps)(Dialogs))"],"names":["Dialog","props","className","s","to","id","isActive","undefined","title","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","requiredField","MSTP","state","isAuth","auth","Component","DialogsContainer","connect","dialogsPage","dispatch","addMessage","newMessageBody","AddMessageActionCreator","DialogsElements","dialogs","map","el","MessagesElements","messages","values","restProps"],"sourceRoot":""}